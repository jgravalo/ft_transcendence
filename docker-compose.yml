services:

#Reverse-proxy + WAF
  waf:
    container_name: waf
    build:
      context: ./waf
    env_file:
      - ./waf/.env.${ENVIRONMENT}
    image: waf
    ports:
      - "${EXTERNAL_PORT}:8080"
      - "${SSL_EXTERNAL_PORT}:8443"
    depends_on:
      - front
      - back
    restart: always
    networks:
      - pongnet
      - monitoring_net
    volumes:
      - nginx_logs:/var/log/nginx
    cap_add:
      - NET_BIND_SERVICE

  front:
    container_name: front
    build:
      context: ./front
    env_file:
      - ./front/.env.${ENVIRONMENT}
    image: front
    networks:
      - pongnet
    volumes:
    - media:/usr/share/nginx/html/img
    - ./front/src:/usr/share/nginx/html

  back:
    container_name: back
    build:
      context: ./back
    image: back
    env_file:
      - ./back/.env.${ENVIRONMENT}
    depends_on:
      db:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - pongnet
      - monitoring_net
    volumes:
      - media:/app/img
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${HOSTNAME}:8080/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: db
    build:
      context: ./db
    container_name: db
    env_file:
      - ./db/.env
    networks:
      - pongnet
      - monitoring_net
    volumes:
      - pgdata:/var/lib/postgresql/data
    depends_on:
      vault:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  vault:
    image: vault
    build:
      context: ./vault
    env_file:
      - ./vault/.env.${ENVIRONMENT}
    container_name: vault
    volumes:
      - ./vault/data:/vault/data
    networks:
      - pongnet
      - monitoring_net
    cap_add:
      - IPC_LOCK
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "sh", "-c", "vault status | grep -q 'Sealed.*false'"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: chat-redis
    ports:
      - "8379:6379"
    networks:
      - pongnet
    restart: always

  prometheus:
    image: prometheus
    build:
      context: ./prometheus
    container_name: prometheus
    env_file:
      - ./prometheus/.env
    volumes:
      - prometheus_data:/etc/prometheus
    ports:
      - 9090:9090
    networks:
      - monitoring_net
      - pongnet
    restart: unless-stopped

  db-exporter:
    image: db-exporter
    build:
      context: ./db-exporter
    container_name: db-exporter
    env_file:
      - ./db-exporter/.env
    networks:
      - monitoring_net
    depends_on:
      vault:
        condition: service_healthy
      db:
        condition: service_started
      prometheus:
        condition: service_started
    restart: unless-stopped

  waf-exporter:
    image: waf-exporter
    build:
      context: ./waf-exporter
    container_name: waf-exporter
    networks:
      - monitoring_net
    depends_on:
      - waf
    volumes:
      - nginx_logs:/var/log/nginx
    restart: unless-stopped

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    networks:
      - monitoring_net
    restart: unless-stopped
  
  alertmanager:
    image: alertmanager
    build:
      context: ./alertmanager
    container_name: alertmanager
    networks:
      - monitoring_net

  grafana:
    image: grafana
    build:
      context: ./grafana
    container_name: grafana
    env_file:
      - ./grafana/.env.${ENVIRONMENT}
    ports:
      - 3000:3000
    networks:
      - pongnet
      - monitoring_net
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    restart: unless-stopped

volumes:
  pgdata:
    name: pgdata
  media:
    name: media
  nginx_logs:
    name: nginx_logs
  prometheus_data:
    name: prometheus_data
  
networks:
  pongnet:
    name: pongnet
    driver: bridge
  monitoring_net:
    name: monitoring_net
    driver: bridge
    internal: true 
