services:

#Reverse-proxy + WAF
  waf:
    container_name: waf
    build:
      context: ./waf
    env_file:
      - ./waf/.env.${ENVIRONMENT}
    image: waf
    ports:
      - "${EXTERNAL_PORT}:8080"
      - "${SSL_EXTERNAL_PORT}:8443"
    depends_on:
      - front
      - back
    networks:
      - pongnet
    volumes:
      - ./waf/conf/nginx.modsecurity.conf.template:/etc/nginx/templates/conf.d/modsecurity.conf.template
      - ./waf/conf/setup.conf.template:/etc/nginx/templates/modsecurity.d/setup.conf.template

  front:
    container_name: front
    build:
      context: ./front
    env_file:
      - ./waf/.env.${ENVIRONMENT}
    image: front
    networks:
      - pongnet
    volumes:
    - ./front/src:/usr/share/nginx/html

  back:
    container_name: back
    build:
      context: ./back
    image: back
    environment:
      - DJANGO_DB_NAME=postgres
      - DJANGO_DB_USER=postgres
      - DJANGO_DB_PASSWORD=Jesus20022
      - DJANGO_DB_HOST=db
      - DJANGO_DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy
    networks:
      - pongnet
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${HOSTNAME}:8080/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: db
    build:
      context: ./db
    container_name: db
    networks:
      - pongnet
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
    name: pgdata

networks:
  pongnet:
    name: pongnet
    driver: bridge
