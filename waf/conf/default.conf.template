# Nginx configuration for both HTTP and SSL

#Show/Hide nginx information (off by default for security)
server_tokens ${SERVER_TOKENS};

#Extra configuration for WebSocket
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Define a map to check if redirect should be enabled
map $NGINX_ALWAYS_TLS_REDIRECT $always_redirect {
    "on"  1;
    "off" 0;
}

# HTTP (non-SSL) server block
server {
    listen ${PORT} default_server;
    server_name ${SERVER_NAME};

    client_max_body_size 0;

    # Redirect HTTP to HTTPS if enabled
    if ($always_redirect) {
        return 301 https://$host$request_uri;
    }

    # Proxy to frontend
    location / {
        proxy_pass ${FRONTEND};
        include includes/cors.conf;
        include includes/proxy_backend.conf;
    }

    # Proxy API calls to backend
    location /api/ {
        proxy_pass ${BACKEND_API};
        include includes/proxy_backend.conf;
    }

    # Proxy WebSocket to backend
    location /ws/ {
        proxy_pass ${BACKEND_WS};
        include includes/proxy_backend.conf;
    }

    include includes/location_common.conf;
}

# HTTPS (SSL) server block
server {
    listen ${SSL_PORT} ssl;
    server_name ${SERVER_NAME};

    # SSL certificate and key
    ssl_certificate ${SSL_CERT};
    ssl_certificate_key ${SSL_CERT_KEY};

    # SSL settings
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;
    ssl_session_tickets off;
    ssl_dhparam /etc/ssl/certs/dhparam-${SSL_DH_BITS}.pem;
    ssl_protocols ${SSL_PROTOCOLS};
    ssl_ciphers ${SSL_CIPHERS};
    ssl_prefer_server_ciphers ${SSL_PREFER_CIPHERS};
    ssl_stapling ${SSL_OCSP_STAPLING};
    ssl_stapling_verify ${SSL_OCSP_STAPLING};
    ssl_verify_client ${SSL_VERIFY};
    ssl_verify_depth ${SSL_VERIFY_DEPTH};

    # Proxy to frontend
    location / {
        proxy_pass ${FRONTEND};
        include includes/cors.conf;
        include includes/proxy_backend.conf;
    }

    # Proxy API calls to backend
    location /api/ {
        proxy_pass ${BACKEND_API};
        include includes/proxy_backend.conf;
    }

    # Proxy WebSocket to backend
    location /ws/ {
        proxy_pass ${BACKEND_WS};
        include includes/proxy_backend.conf;
    }

    include includes/location_common.conf;
}